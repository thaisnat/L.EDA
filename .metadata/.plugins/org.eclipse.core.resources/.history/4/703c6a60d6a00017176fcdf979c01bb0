package sorting.divideAndConquer;

import sorting.AbstractSorting;

/**
 * Merge sort is based on the divide-and-conquer paradigm. The algorithm
 * consists of recursively dividing the unsorted list in the middle, sorting
 * each sublist, and then merging them into one single sorted list. Notice that
 * if the list has length == 1, it is already sorted.
 */
public class MergeSort<T extends Comparable<T>> extends AbstractSorting<T> {

	@Override
	public void sort(T[] array, int leftIndex, int rightIndex) {
		
		int mediumIndex;
		
		if(leftIndex < rightIndex){
			
			mediumIndex = (leftIndex + rightIndex)/2;
			
			sort(array, leftIndex, mediumIndex );
			sort(array, mediumIndex+1, rightIndex);
			
			merge(array, leftIndex, mediumIndex, rightIndex);
		}
		
	}
	
	public void merge(T[] array, int leftIndex,int mediumIndex, int rightIndex){
		
		int indiceEsq, indiceDir;
		int indice;
		
		indiceEsq = leftIndex;
		indiceDir = mediumIndex + 1;
		indice = leftIndex;
		
		T[] arrayAux = (T[]) new Comparable[array.length];
		
		for (int i = 0; i < arrayAux.length; i++) {
			arrayAux[i] = array[i];
		}
		
		while(mediumIndex >= indiceEsq  &&  rightIndex >= indiceDir){
			if(arrayAux[indiceDir].compareTo(arrayAux[indiceEsq]) >= 0){
				array[indice] = arrayAux[indiceEsq];
				indiceEsq++;
			}else{
				array[indice] = arrayAux[indiceDir];
				indiceDir++;
			}
			indice++;
		}
		
		while(mediumIndex >= indiceEsq){
			array[indice] = arrayAux[indiceEsq];
			indiceEsq++;
			indice++;
		}
		
		
	}
}