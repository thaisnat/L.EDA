package sorting.divideAndConquer.threeWayQuicksort;

import sorting.AbstractSorting;
import util.Util;

public class ThreeWayQuickSort<T extends Comparable<T>> extends AbstractSorting<T> {

	/**
	 * No algoritmo de quicksort, selecionamos um elemento como pivot,
	 * particionamos o array colocando os menores a esquerda do pivot e os
	 * maiores a direita do pivot, e depois aplicamos a mesma estrategia
	 * recursivamente na particao a esquerda do pivot e na particao a direita do
	 * pivot.
	 * 
	 * Considerando um array com muitoe elementos repetidos, a estrategia do
	 * quicksort pode ser otimizada para lidar de forma mais eficiente com isso.
	 * Essa melhoria eh conhecida como quicksort tree way e consiste da seguinte
	 * ideia: - selecione o pivot e particione o array de forma que * arr[l..i]
	 * contem elementos menores que o pivot * arr[i+1..j-1] contem elementos
	 * iguais ao pivot. * arr[j..r] contem elementos maiores do que o pivot.
	 * 
	 * Obviamente, ao final do particionamento, existe necessidade apenas de
	 * ordenar as particoes contendo elementos menores e maiores do que o pivot.
	 * Isso eh feito recursivamente.
	 **/
	@Override
	public void sort(T[] array, int leftIndex, int rightIndex) {
		if (leftIndex >= 0 && rightIndex > 0 && rightIndex < array.length && leftIndex < rightIndex) {

			int pivot = partition(array, leftIndex, rightIndex);
			sort(array, leftIndex, pivot - 1);
			sort(array, pivot, pivot);
			sort(array, pivot + 1, rightIndex);
		}
	}

	public int partition(T[] array, int left, int right) {

		int leftIndex = left + 1;
		int rightIndex = right;
		T pivot = array[left];

		while (leftIndex <= rightIndex) {

			if (array[leftIndex].compareTo(pivot) <= 0) {
				leftIndex++;
			} else if (array[rightIndex].compareTo(pivot) > 0) {
				rightIndex--;
			} else {
				Util.swap(array, leftIndex, rightIndex);
			}
		}
		Util.swap(array, left, rightIndex);
		return rightIndex;
	}

}
